#include <iostream>
#include <cmath>
#include <string>
#include <stdio.h>
#include <stack>
using namespace std;

int i,j,p;
char ch;
char relation[14][14],a[15][15];
char b[80];
char mark[14]={'S','E','e','T','t','F','i','(','=',')','+','*','$','#'};
int compare(char pre, char d);
int main()
{
    stack<char> s;
    relation[1][9]=relation[3][2]=relation[5][4]=relation[6][8]=relation[7][1]=relation[10][3]=relation[11][5]=relation[8][1]=relation[13][13]='=';
    relation[3][10]=relation[3][12]=relation[5][11]=relation[5][12]=relation[7][3]=relation[7][5]=relation[7][6]=relation[7][7]=relation[10][5]=relation[10][6]=relation[10][7]=relation[11][6]=relation[11][7]=relation[8][3]=relation[8][5]=relation[8][6]=relation[8][7]=relation[13][0]=relation[13][6]='<';
    relation[4][2]=relation[4][10]=relation[4][12]=relation[5][9]=relation[5][10]=relation[6][4]=relation[6][9]=relation[6][10]=relation[6][11]=relation[6][12]=relation[9][4]=relation[12][2]=relation[12][10]=relation[12][12]=relation[0][13]=relation[1][13]=relation[2][13]=relation[9][11]=relation[3][13]=relation[4][13]=relation[5][13]=relation[9][13]=relation[6][13]=relation[12][13]=relation[2][9]=relation[4][9]=relation[3][9]='>';
    cout<<"文法G(S):"<<endl;
    cout<<"S->i=E"<<endl;
    cout<<"E->Te"<<endl;
    cout<<"e->+Te|$"<<endl;
    cout<<"T->Ft"<<endl;
    cout<<"t->*Ft|$"<<endl;
    cout<<"F->i|(E)"<<endl;
    cout<<"简单优先关系矩阵："<<endl;
    for(i=1;i<15;i++)
    {
        a[0][i]=mark[i-1];
    }
    for(j=1;j<15;j++)
    {
        a[j][0]=mark[j-1];
    }
    for(i=1;i<15;i++)
    {
        for(j=1;j<15;j++)
        {
            a[i][j]=relation[i-1][j-1];
        }
    }
    for(i=0;i<15;i++)
    {
        for(j=0;j<15;j++)
        {
            cout<<a[i][j]<<"   ";
        }
        cout<<endl;
    }
    p=0;
	cout<<"Please input string end with #"<<endl;
	do
	{
		ch=getchar();
		b[p++]=ch;
	}while(ch!='#');
	p=0;
	s.push('#');
	while(!s.empty())
    {
        char pre = s.top();
        if(compare(pre,b[p])==1)
        {
            s.push(b[p]);
            cout<<"移进"<<b[p]<<endl;
        }
        else if(compare(pre,b[p])==0)
		{
            cout<<"归约";
            p--;
            char c=s.top();
            switch(c)
            {
                case'S':s.pop();if(s.top()=='#'){s.pop();cout<<"#S#"<<endl;break;}else {cout<<"error"<<endl;break;}

				case'E':s.pop();if(s.top()=='=')
						{
							s.pop();
					        if(s.top()=='i')
							{
								s.pop();s.push('S');cout<<"S->i=E"<<endl;break;
							}
							else {cout<<"error"<<endl;break;}
						}
					    else {cout<<"error"<<endl;break;}

                case'e':s.pop();if(s.top()=='T')
						{   s.pop();
						    if(s.top()=='+')
                            {
                                s.pop();s.push('e');cout<<"e->+Te|$"<<endl;break;
						    }
						    else{s.push('E');cout<<"E->Te"<<endl;break;}
						}else {cout<<"error"<<endl;break;}

				case't':s.pop();if(s.top()=='F')
						{   s.pop();
						    if(s.top()=='*')
                            {
                                s.pop();s.push('t');cout<<"t->*Ft|$"<<endl;break;
						    }
						    else{s.push('T');cout<<"T->Ft"<<endl;break;}
						}else {cout<<"error"<<endl;break;}
				case'i':{s.pop();s.push('F');cout<<"F->i|(E)"<<endl;break;}
				case'F':{s.pop();
					    if(s.top()=='*')
						{
							s.pop();
							s.push('t');cout<<"t->*Ft|$"<<endl;break;
						}
						else{s.push('T');cout<<"T->Ft"<<endl;break;}
						}
				case'T':{s.pop();
					    if(s.top()=='+')
						{
							s.pop();
							s.push('e');cout<<"e->+Te|$"<<endl;break;
						}
						else{s.push('E');cout<<"E->Te"<<endl;break;}
						}
				case')':{s.pop();
				        if(s.top()=='E')
						{
							s.pop();
							if(s.top()=='('){s.pop();s.push('F');cout<<"F->i|(E)"<<endl;break;}
							else {cout<<"error"<<endl;break;}
						}
				        }
            }
        }
		else{cout<<"关系错误"<<endl;break;}
        p++;
    }
    if(s.empty())
    {
        cout<<"分析成功"<<endl;
    }else{
        cout<<"分析失败"<<endl;
    }
    return 0;
}

int compare(char pre, char d)
{
    int a=50,b=50;
    for(i=0;i<14;i++)
    {
        if(mark[i]==pre)a=i;
        if(mark[i]==d)b=i;
    }
	if(a==50){return 2;}
    char rel = relation[a][b];
    if(rel=='>'){    return 0;   }
    if(rel=='='||rel=='<'){    return 1;   }
    return 2;
}